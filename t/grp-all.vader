""" check AgGroup command
= :AgGroup regex

================================
Execute (::Hold cwd fixture):
  cd fixture
  let g:ag_old = deepcopy(g:ag, 1)
  let g:isk_def = &isk

Before (Restore default state):
  %bdelete | only
  let g:ag = deepcopy(g:ag_old, 1)
  let &isk = g:isk_def

================================
Execute(Find "fuga" inside fixture directory):
  AgGroup fuga

Expect (matches on line 3,11,12 and 14):
  sample.vim
  3:8:   let fuga = 'bazz'
  11:7:   if fuga =~ 'z'
  12:13:      echo "fuga contains z"
  14:13:      echo 'fuga does not contains z'

Then (syntax for search match "fuga"):
  AssertEqual 'agPath', SyntaxAt(1,1)
  AssertEqual 'agMatchNum', SyntaxAt(2,1)
  AssertEqual 'agSearch', SyntaxAt(2,14)
  AssertEqual 'agSearch', SyntaxAt(3,14)
  AssertEqual 'agSearch', SyntaxAt(4,21)
  AssertEqual 'agSearch', SyntaxAt(5,21)

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Execute(Find "fuga" with context):
  3AgGroup fuga

Then (syntax for context search):
  AssertEqual 'agContextLine', SyntaxAt(2,3)
  AssertEqual 'agSearch', SyntaxAt(4,12)

Expect (matches with context):
  sample.vim
  1-function! Foo(bar)
  2-   let hoge = 0
  3:8:   let fuga = 'bazz'
  4-
  5-   if hoge == 0
  6-      echo "hoge is 0"
  --
  8-      echo "hoge is not 0"
  9-   endif
  10-
  11:7:   if fuga =~ 'z'
  12:13:      echo "fuga contains z"
  13-   else
  14:13:      echo 'fuga does not contains z'
  15-   endif
  16-
  17-   echo 'argument bar is ' . a:bar

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Execute(find multiword "let hoge" on fixture directory):
  AgGroup "let hoge"

Then (syntax for multiword "let hoge"):
  AssertEqual 'agSearch', SyntaxAt(2,8)
  AssertEqual 'agSearch', SyntaxAt(2,15)

Expect (matches for "let hoge"):
  sample.vim
  2:4:   let hoge = 0

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Execute(find multiword "fuga does not contains" on fixture directory):
  AgGroup "fuga does not contains"

Then (syntax for multiword "fuga does not contains"):
  AssertEqual 'agSearch', SyntaxAt(2,19)
  AssertEqual 'agSearch', SyntaxAt(2,40)

Expect (matches for "fuga does not contains"):
  sample.vim
  14:13:      echo 'fuga does not contains z'

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Execute(find word with #):
  AgGroup "sample#Bar"

Expect (match on line 20 and 21):
  sample.vim
  20:10:function sample#Bar(arg)
  21:41:   echo "this is sample function called sample#Bar"

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Execute(find word with %):
  AgGroup "%foge"

Expect (match on line 22 and 41):
  sample.vim
  22:33:   echo "a line with percentage %foge"

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Execute (history addition):
  let g:ag.toggle.mappings_to_cmd_history = 1
  AgGroup "hoge"
  call ag#ctrl#NextFold()
  call ag#ctrl#OpenFile(0)
  exe "norm j\<Plug>(ag-group)"

Then (expect search to be on history):
  AssertEqual histget(":"), "AgGroup 'fuga'"

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Execute (find results with escape char and visual selection):
  edit sample.vim
  1/sample#Bar
  set isk+=#  " emulate vim filetype iskeyword
  exe "norm gn\<Plug>(ag-group)"

Then (highlight for visual selection "sample#Bar"):
  AssertEqual 'agSearch', SyntaxAt(2,16)
  AssertEqual 'agSearch', SyntaxAt(2,25)
  AssertEqual 'agSearch', SyntaxAt(3,47)
  AssertEqual 'agSearch', SyntaxAt(3,56)

Expect (results for visual selection):
  sample.vim
  20:10:function sample#Bar(arg)
  21:41:   echo "this is sample function called sample#Bar"

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Execute (visual search multiword):
  edit sample.vim
  1/hoge is
  exe "norm gn\<Plug>(ag-group)"

Then (highlight for multiword "hoge is"):
  AssertEqual 'agSearch', SyntaxAt(2,18)
  AssertEqual 'agSearch', SyntaxAt(3,18)
  AssertEqual 'agSearch', SyntaxAt(2,24)
  AssertEqual 'agSearch', SyntaxAt(3,24)

Expect (two matches on line 6 and 8):
  sample.vim
  6:13:      echo "hoge is 0"
  8:13:      echo "hoge is not 0"

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Execute (don't open search buffer if no results):
  edit sample.vim
  AgGroup nomatch

Then (last bufname):
  AssertEqual 'sample.vim', bufname('%')

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Execute (find results with escape char and cword):
  edit sample.vim
  1/sample#Bar
  set isk+=#  " emulate vim filetype iskeyword
  exe "norm gn\<Plug>(ag-group)"

Then (highlight for cword "sample#Bar"):
  AssertEqual 'agSearch', SyntaxAt(2,16)
  AssertEqual 'agSearch', SyntaxAt(2,25)
  AssertEqual 'agSearch', SyntaxAt(3,47)
  AssertEqual 'agSearch', SyntaxAt(3,56)

Expect (results for cword):
  sample.vim
  20:10:function sample#Bar(arg)
  21:41:   echo "this is sample function called sample#Bar"

================================
Before:
After:
Execute (::Release fixture):
  cd ..
