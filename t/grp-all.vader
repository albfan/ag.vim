
""" check AgGroup command

================================
Execute (::Hold syntax fixture):
  syntax on
=========== AgGroup =============
Execute(Find "fuga" inside t/fixture directory):
  :AgGroup fuga fixture

Then (syntax for multiword match "let"):
  AssertEqual SyntaxAt(2,14), 'agSearch'

Expect (matches on line 3,11,12 and 14):
  fixture/sample.vim
  3:8:   let fuga = 'bazz'
  11:7:   if fuga =~ 'z'
  12:13:      echo "fuga contains z"
  14:13:      echo 'fuga does not contains z'

Execute(find multiword "let hoge" on t/fixture directory):
  AgGroup "let hoge" fixture

Expect (match on line 2):
  fixture/sample.vim
  2:4:   let hoge = 0

Then (syntax for multiword "let hoge"):
  AssertEqual SyntaxAt(2,8), 'agSearch'
  AssertEqual SyntaxAt(2,9), 'agSearch'

Execute(find word with #):
  AgGroup "sample#Bar" fixture

Expect (match on line 20 and 21):
  fixture/sample.vim
  20:10:function sample#Bar(arg)
  21:41:   echo "this is sample function called sample#Bar"

Execute(find word with %):
  AgGroup "%foge" fixture

Expect (match on line 22 and 41):
  fixture/sample.vim
  22:33:   echo "a line with percentage %foge"

Execute (history addition):
  let g:ag.toggle.mappings_to_cmd_history = 1
  "do a search
  AgGroup "hoge" fixture
  "goto line
  "execute "normal \<Space>"
  call ag#ctrl#NextFold()
  "execute "normal \<Enter>"
  call ag#ctrl#OpenFile(0)
  "move around
  normal j
  "search with shortcut
  execute "normal ".get(g:, "mapleader", "\\")."ag"
  "expect search to be on history
  AssertEqual histget(":"), "AgGroup '-Qw' 'fuga'"

Execute (visual search multiword):
  edit fixture/sample.vim
  " visual select 'hoge is'
  1
  execute "normal 5j3wv2e".get(g:, "mapleader", "\\")."ag"

Expect (two matches on line 6 and 8):
  fixture/sample.vim
  6:13:      echo "hoge is 0"
  8:13:      echo "hoge is not 0"

Then (highlight for multiword "hoge is"):
  AssertEqual SyntaxAt(2,18), 'agSearch'
  AssertEqual SyntaxAt(3,18), 'agSearch'
  AssertEqual SyntaxAt(2,24), 'agSearch'
  AssertEqual SyntaxAt(3,24), 'agSearch'

Execute (don't open search buffer if no results):
  edit fixture/sample.vim
  AgGroup nomatch fixture
  AssertEqual 'fixture/sample.vim', bufname('%')

================================
Execute (::Release fixture):
  syntax off
